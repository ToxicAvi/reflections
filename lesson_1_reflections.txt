Q:How did viewing a diff between two versions of a file help you see 
the bug that was introduced?

A:It helps me see what changed from the previous working version of 
the file to the new version.

Q:How could having easy access to the entire history of a file make 
you a more efficient programmer in the long term?

A:It makes me a better programmer by giving me the ability to change
back some things in newer versions of my code that i liked better in
the older versions, and to remember the root and main idea in my code
before adding more code to it.

Q:What do you think are the pros and cons of manually choosing 
when to create a commit, like you do in Git, vs having 
versions automatically saved, like Google Docs does?

A:	Pros - you can choose to commit whenever you make a
	logical change in your code, which only you can know.
	Cons - you might forget to commit regulalry whenever you're making changes to your code.

Q:Why do you think some version control systems, like Git, allow
saving multiple files in one commit, while others, like Google
Docs, treat each file separately?

A:Git is mainly used on version control for coding projects which
consist of any number of files that are interacting with each other,
therefor a change in one file might require a change in another file
too. what intrests us here is THE CHANGES MADE IN THE PROJECT, and not
WHEN THE CHANGES WERE MADE, therefor we need the entire project to be
saved for us to see all the files that were changed simultaneously,
and the oposite happens on goole docs, where each file is individual.

Q:How can you use the commands git log and git diff to view the history
of files?

A:git log shows me the list of commits wich is basically the history
of the file, ordered by the time the commit was made, and diff helps me
see the difference between a file from a previous version and a file 
from a more recenet version.

Q:How might using version control make you more confident to make
changes that could break something?

A:Version control lets you move back to an older working version of
your code in case the new version has a bug in it, which means even
if you mess everything up by adding new faulty code, you can always
go back to how it was and even find a fix by comparing the old
version to the new one!

Q:Now that you have your workspace set up, what do you want to try
using Git for?

A:I'd like to use Git for all my future projects, and course projects
i may have.